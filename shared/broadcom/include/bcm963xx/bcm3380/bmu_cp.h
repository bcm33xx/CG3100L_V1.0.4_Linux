// ****************************************************************************
//
// Copyright (c) 2008 Broadcom Corporation
//
// This program is the proprietary software of Broadcom Corporation and/or
// its licensors, and may only be used, duplicated, modified or distributed
// pursuant to the terms and conditions of a separate, written license
// agreement executed between you and Broadcom (an "Authorized License").
// Except as set forth in an Authorized License, Broadcom grants no license
// (express or implied), right to use, or waiver of any kind with respect to
// the Software, and Broadcom expressly reserves all rights in and to the
// Software and all intellectual property rights therein.  IF YOU HAVE NO
// AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
// AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
// SOFTWARE.  
//
// Except as expressly set forth in the Authorized License,
//
// 1.     This program, including its structure, sequence and organization,
// constitutes the valuable trade secrets of Broadcom, and you shall use all
// reasonable efforts to protect the confidentiality thereof, and to use this
// information only in connection with your use of Broadcom integrated circuit
// products.
//
// 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
// "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
// OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
// RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
// IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
// A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
// ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
// THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
//
// 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
// OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
// INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
// RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
// HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
// EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
// WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
// FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
//
// ****************************************************************************
//
//  Filename:         bmu_cp.h
//  Generated by:     RDB Utility
//  Creation Date:    8/7/2008
//  Command Line:     
// ****************************************************************************
//
// IMPORTANT: DO NOT MODIFY, THIS IS AN AUTOGENERATED FILE. 
// Please modify the source .rdb file instead if you need to change this file. 
// Contact Jeff Bauch if you need more information.
//
// ****************************************************************************
#ifndef BMU_CP_H__
#define BMU_CP_H__


enum BMU_CP_MEAS_SEL_VAL {
  BMU_CP_MEAS_SEL_VAL_V_IN=0x0,                      
  BMU_CP_MEAS_SEL_VAL_V_BATT=0x1,                    
  BMU_CP_MEAS_SEL_VAL_I_BATT=0x2,                    
  BMU_CP_MEAS_SEL_VAL_I_ADAP=0x3,                    
  BMU_CP_MEAS_SEL_VAL_THERM=0x4,                     
  BMU_CP_MEAS_SEL_VAL_RID_A=0x5,                     
  BMU_CP_MEAS_SEL_VAL_RID_B=0x6,                     
  BMU_CP_MEAS_SEL_VAL_OFFSET_1x=0x7,                 
  BMU_CP_MEAS_SEL_VAL_OFFSET_4x=0x8,                 
  BMU_CP_MEAS_SEL_VAL_OFFSET_16x=0x9,                
  BMU_CP_MEAS_SEL_VAL_MISC=0xa,                      
};


typedef union {
  struct {
    uint32 Reserved                       :30;
    uint32 ActiveBatB                     :1; 
    uint32 ActiveBatA                     :1; 
  } Bits;
  uint32 Reg32;
}  BmuCpActiveBat;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 AcDisable                      :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpAcDisable;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 AnaPd                          :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpAnalogPd;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 SwitchBat                      :1; 
                                              
                                              
                                              
                                              
                                              
    uint32 Reserved2                      :2; 
    uint32 BatBEn                         :1; 
    uint32 BatAEn                         :1; 
  } Bits;
  uint32 Reg32;
}  BmuCpBatteryEn;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Flag                           :1; 
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpAccumSat;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Flag                           :1; 
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpBusy;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Flag                           :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpDone;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 Flag                           :5; 
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpExp;


typedef union {
  struct {
    uint32 Reserved                       :28;
    uint32 Flag                           :4; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpFcw;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 Flag                           :10;
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpIScale;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 Flag                           :10;
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpMeasCycleLen;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Flag                           :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpModStart;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Flag                           :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpShiftingDone;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Flag                           :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpStart;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 Flag                           :10;
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpBatImpVScale;


typedef union {
  struct {
    uint32 Reserved                       :28;
    uint32 StopDischarge                  :1; 
    uint32 PwmDis                         :1; 
                                              
                                              
    uint32 Mode                           :2; 
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpChargerMode;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 FuelMeterEnable                :2; 
                                              
    uint32 Reserved2                      :4; 
    uint32 AccumFreq                      :4; 
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpFuelMeterCtrl;


typedef union {
  struct {
    uint32 Reserved                       :30;
    uint32 FuelMeterLoad                  :2; 
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpFuelMeterLoad;


typedef union {
  struct {
    uint32 Reserved                       :29;
    uint32 Correction                     :3; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpGainShift;


typedef union {
  struct {
    uint32 Reserved                       :16;
    uint32 Interrupt                      :16;
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpInterrupt;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 Thsh                           :10;
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpIBattChgThsh;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 Thsh                           :10;
                                              
                                              
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpIBattDisThsh;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 Correction                     :10;
  } Bits;
  uint32 Reg32;
}  BmuCpMeasCorrection;


typedef union {
  struct {
    uint32 Reserved                       :30;
    uint32 Select                         :2; 
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpMeasSela;


typedef union {
  struct {
    uint32 Reserved                       :29;
    uint32 Select                         :3; 
                                              
                                              
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpMeasSelb;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Speed                          :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpMeasSpeedSelect;


typedef union {
  struct {
    uint32 Reserved                       :23;
    uint32 Ovrd                           :1; 
    uint32 TicDivide                      :8; 
  } Bits;
  uint32 Reg32;
}  BmuCpOwiConfig;


typedef union {
  struct {
    uint32 Reserved                       :19;
    uint32 Start                          :1; 
                                              
    uint32 WireNum                        :1; 
    uint32 Reserved2                      :1; 
    uint32 Command                        :2; 
                                              
                                              
                                              
    uint32 InputByte                      :8; 
  } Bits;
  uint32 Reg32;
}  BmuCpOwiControl;


typedef union {
  struct {
    uint32 Reserved                       :19;
    uint32 StartError                     :1; 
                                              
    uint32 Reserved2                      :3; 
    uint32 CommandDone                    :1; 
                                              
    uint32 OutputByte                     :8; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpOwiStatus;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 PsTime                         :8; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpPulseStart;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 RrSgl                          :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpRrSgl;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 SlewCtl                        :1; 
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpSlewWindowSize;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 Thsh                           :10;
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpVBattChgThsh;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 Thsh                           :10;
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuCpVBattDisThsh;

typedef struct {
  uint32                              TimerMsCount;            
  uint32                              TimerUsCount;            
  uint8                               Pad0[0x8];
  BmuCpInterrupt                      Interrupt;               
  uint8                               Pad1[0x8];
  BmuCpAcDisable                      AcDisable;               
  uint8                               Pad2[0xc];
  BmuCpBatteryEn                      BatteryEn;               
  uint8                               Pad3[0x8];
  BmuCpActiveBat                      ActiveBat;               
  uint8                               Pad4[0x4];
  BmuCpChargerMode                    ChargerMode;             
  uint8                               Pad5[0xc];
  BmuCpIBattDisThsh                   IBattDisThsh;            
  BmuCpVBattDisThsh                   VBattDisThsh;            
  BmuCpVBattChgThsh                   VBattChgThsh;            
  BmuCpIBattChgThsh                   IBattChgThsh;            
  uint8                               Pad6[0x8];
  BmuCpFuelMeterCtrl                  FuelMeterCtrl;           
  uint8                               Pad7[0xc];
  BmuCpFuelMeterLoad                  FuelMeterLoad;           
  uint8                               Pad8[0x4];
  BmuCpAnalogPd                       AnaPd;                   
  BmuCpRrSgl                          RrOrSingleA;             
  BmuCpRrSgl                          RrOrSingleB;             
  BmuCpMeasSela                       SingleMeasSelA;          
  BmuCpMeasSelb                       SingleMeasSelB;          
  BmuCpSlewWindowSize                 SlewWindowSizes;         
  uint8                               Pad9[0x10];
  BmuCpMeasCorrection                 VbatCorr;                
  BmuCpMeasCorrection                 IbatCorr;                
  BmuCpGainShift                      IGainShift;              
  uint8                               Pad10[0x4];
  BmuCpPulseStart                     PulseStartTime;          
  BmuCpMeasSpeedSelect                HispdLospdPwm;           
  uint32                              CmStartValue;            
  uint32                              EmStartValue;            
  BmuCpOwiControl                     OwiControl;              
  BmuCpOwiConfig                      OwiConfig;               
  BmuCpOwiStatus                      OwiStatus;               
  BmuCpBatImpModStart                 BatImpModStart;          
  BmuCpBatImpBusy                     BatImpBusy;              
  uint8                               Pad11[0x10];
  BmuCpBatImpExp                      BatImpExp;               
  BmuCpBatImpAccumSat                 BatImpAccumSat;          
                                                                 
  BmuCpBatImpDone                     BatImpDone;              
                                                                 
  BmuCpBatImpShiftingDone             BatImpShiftingDone;      
  BmuCpBatImpStart                    BatImpStart;             
  BmuCpBatImpVScale                   BatImpVScale;            
  BmuCpBatImpIScale                   BatImpIScale;            
  BmuCpBatImpFcw                      BatImpFcw;               
                                                                 
  BmuCpBatImpMeasCycleLen             BatImpMeasCycleLen;      
}  BmuCpRegs;

#endif 



