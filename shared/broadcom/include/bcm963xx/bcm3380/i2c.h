// ****************************************************************************
//
// Copyright (c) 2008 Broadcom Corporation
//
// This program is the proprietary software of Broadcom Corporation and/or
// its licensors, and may only be used, duplicated, modified or distributed
// pursuant to the terms and conditions of a separate, written license
// agreement executed between you and Broadcom (an "Authorized License").
// Except as set forth in an Authorized License, Broadcom grants no license
// (express or implied), right to use, or waiver of any kind with respect to
// the Software, and Broadcom expressly reserves all rights in and to the
// Software and all intellectual property rights therein.  IF YOU HAVE NO
// AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
// AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
// SOFTWARE.  
//
// Except as expressly set forth in the Authorized License,
//
// 1.     This program, including its structure, sequence and organization,
// constitutes the valuable trade secrets of Broadcom, and you shall use all
// reasonable efforts to protect the confidentiality thereof, and to use this
// information only in connection with your use of Broadcom integrated circuit
// products.
//
// 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
// "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
// OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
// RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
// IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
// A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
// ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
// THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
//
// 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
// OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
// INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
// RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
// HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
// EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
// WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
// FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
//
// ****************************************************************************
//
//  Filename:         i2c.h
//  Generated by:     RDB Utility
//  Creation Date:    8/7/2008
//  Command Line:     
// ****************************************************************************
//
// IMPORTANT: DO NOT MODIFY, THIS IS AN AUTOGENERATED FILE. 
// Please modify the source .rdb file instead if you need to change this file. 
// Contact Jeff Bauch if you need more information.
//
// ****************************************************************************
#ifndef I2C_H__
#define I2C_H__



typedef union {
  struct {
    uint32 PortSelect                     :1; 
                                              
    uint32 Reserved                       :23;
    uint32 ChipAddress                    :7; 
                                              
    uint32 Reserved2                      :1; 
  } Bits;
  uint32 Reg32;
}  I2cChipAddress;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 CntReg2                        :4; 
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
    uint32 CntReg1                        :4; 
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  I2cCntReg;


typedef union {
  struct {
    uint32 Reserved                       :30;
    uint32 IgnoreAck                      :1; 
                                              
                                              
                                              
                                              
                                              
    uint32 WaitDis                        :1; 
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  I2cCtlhiReg;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DivClk                         :1; 
                                              
                                              
    uint32 IntEn                          :1; 
                                              
                                              
                                              
                                              
    uint32 SclSel                         :2; 
                                              
                                              
                                              
                                              
                                              
                                              
    uint32 DelayDis                       :1; 
                                              
                                              
                                              
    uint32 DeglitchDis                    :1; 
                                              
                                              
    uint32 Dtf                            :2; 
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  I2cCtlReg;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataIn0                        :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataIn0;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataIn1                        :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataIn1;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataIn2                        :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataIn2;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataIn3                        :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataIn3;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataIn4                        :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataIn4;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataIn5                        :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataIn5;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataIn6                        :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataIn6;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataIn7                        :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataIn7;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataOut0                       :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataOut0;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataOut1                       :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataOut1;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataOut2                       :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataOut2;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataOut3                       :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataOut3;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataOut4                       :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataOut4;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataOut5                       :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataOut5;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataOut6                       :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataOut6;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 DataOut7                       :8; 
                                              
  } Bits;
  uint32 Reg32;
}  I2cDataOut7;


typedef union {
  struct {
    uint32 Reserved                       :25;
    uint32 Restart                        :1; 
                                              
                                              
                                              
                                              
    uint32 NoStart                        :1; 
                                              
                                              
                                              
                                              
    uint32 NoStop                         :1; 
                                              
                                              
                                              
    uint32 Reserved2                      :1; 
    uint32 NoAck                          :1; 
                                              
                                              
                                              
    uint32 Intrp                          :1; 
                                              
                                              
                                              
                                              
    uint32 Enable                         :1; 
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  I2cIicEnable;

typedef struct {
  I2cChipAddress                      ChipAddress;             
  I2cDataIn0                          DataIn0;                 
  I2cDataIn1                          DataIn1;                 
  I2cDataIn2                          DataIn2;                 
  I2cDataIn3                          DataIn3;                 
  I2cDataIn4                          DataIn4;                 
  I2cDataIn5                          DataIn5;                 
  I2cDataIn6                          DataIn6;                 
  I2cDataIn7                          DataIn7;                 
  I2cCntReg                           CntReg;                  
  I2cCtlReg                           CtlReg;                  
  I2cIicEnable                        IicEnable;               
  I2cDataOut0                         DataOut0;                
  I2cDataOut1                         DataOut1;                
  I2cDataOut2                         DataOut2;                
  I2cDataOut3                         DataOut3;                
  I2cDataOut4                         DataOut4;                
  I2cDataOut5                         DataOut5;                
  I2cDataOut6                         DataOut6;                
  I2cDataOut7                         DataOut7;                
  I2cCtlhiReg                         CtlhiReg;                
  uint32                              SclParam;                
}  I2cReg;

#endif 



