// ****************************************************************************
//
// Copyright (c) 2008 Broadcom Corporation
//
// This program is the proprietary software of Broadcom Corporation and/or
// its licensors, and may only be used, duplicated, modified or distributed
// pursuant to the terms and conditions of a separate, written license
// agreement executed between you and Broadcom (an "Authorized License").
// Except as set forth in an Authorized License, Broadcom grants no license
// (express or implied), right to use, or waiver of any kind with respect to
// the Software, and Broadcom expressly reserves all rights in and to the
// Software and all intellectual property rights therein.  IF YOU HAVE NO
// AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
// AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
// SOFTWARE.  
//
// Except as expressly set forth in the Authorized License,
//
// 1.     This program, including its structure, sequence and organization,
// constitutes the valuable trade secrets of Broadcom, and you shall use all
// reasonable efforts to protect the confidentiality thereof, and to use this
// information only in connection with your use of Broadcom integrated circuit
// products.
//
// 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
// "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
// OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
// RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
// IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
// A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
// ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
// THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
//
// 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
// OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
// INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
// RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
// HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
// EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
// WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
// FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
//
// ****************************************************************************
//
//  Filename:         bmu_ls.h
//  Generated by:     RDB Utility
//  Creation Date:    8/7/2008
//  Command Line:     
// ****************************************************************************
//
// IMPORTANT: DO NOT MODIFY, THIS IS AN AUTOGENERATED FILE. 
// Please modify the source .rdb file instead if you need to change this file. 
// Contact Jeff Bauch if you need more information.
//
// ****************************************************************************
#ifndef BMU_LS_H__
#define BMU_LS_H__


enum BMU_LS_MEAS_SEL_VAL {
  BMU_LS_MEAS_SEL_VAL_V_IN=0x0,                      
  BMU_LS_MEAS_SEL_VAL_V_BATT=0x1,                    
  BMU_LS_MEAS_SEL_VAL_I_BATT=0x2,                    
  BMU_LS_MEAS_SEL_VAL_I_ADAP=0x3,                    
  BMU_LS_MEAS_SEL_VAL_THERM=0x4,                     
  BMU_LS_MEAS_SEL_VAL_RID_A=0x5,                     
  BMU_LS_MEAS_SEL_VAL_RID_B=0x6,                     
  BMU_LS_MEAS_SEL_VAL_OFFSET_1X=0x7,                 
  BMU_LS_MEAS_SEL_VAL_OFFSET_4X=0x8,                 
  BMU_LS_MEAS_SEL_VAL_OFFSET_16X=0x9,                
  BMU_LS_MEAS_SEL_VAL_MISCELLAENOUS=0xa,             
};

enum BMU_LS_RANGE_BIT {
  BMU_LS_RANGE_BIT_V_IN=0x1,                         
  BMU_LS_RANGE_BIT_V_BATT=0x2,                       
  BMU_LS_RANGE_BIT_I_BATT=0x4,                       
  BMU_LS_RANGE_BIT_I_ADAP=0x8,                       
  BMU_LS_RANGE_BIT_THERM=0x10,                       
  BMU_LS_RANGE_BIT_RID_A=0x20,                       
  BMU_LS_RANGE_BIT_RID_B=0x40,                       
  BMU_LS_RANGE_BIT_OFFSET_1X=0x80,                   
  BMU_LS_RANGE_BIT_OFFSET_4X=0x100,                  
  BMU_LS_RANGE_BIT_OFFSET_16X=0x200,                 
  BMU_LS_RANGE_BIT_MISCELLANEOUS=0x400,              
};


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 K1                             :4; 
    uint32 K0                             :4; 
  } Bits;
  uint32 Reg32;
}  BmuLsBatteryChargeCtrl1;


typedef union {
  struct {
    uint32 Reserved                       :30;
    uint32 PicoBootRomCompleted           :1; 
    uint32 PicoBootRomEnabledViaOtp       :1; 
  } Bits;
  uint32 Reg32;
}  BmuLsBootromStatus;


typedef union {
  struct {
    uint32 Reserved                       :30;
    uint32 ValidBits                      :2; 
  } Bits;
  uint32 Reg32;
}  BmuLsFuelMeterValidReg;


typedef union {
  struct {
    uint32 Reserved                       :16;
    uint32 Result                         :16;
  } Bits;
  uint32 Reg32;
}  BmuLsImpedanceTestResult;


typedef union {
  struct {
    uint32 Reserved                       :19;
    uint32 LoadIntegValue                 :1; 
                                              
    uint32 Reserved2                      :3; 
    uint32 IntegStartValue                :9; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuLsIntergratorStartValue;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 RestartAvg                     :1; 
    uint32 WindowSlew                     :4; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuLsMcontrol;


typedef union {
  struct {
    uint32 Reserved                       :23;
    uint32 Saturation                     :1; 
                                              
    uint32 Reserved2                      :2; 
    uint32 InstValid                      :1; 
                                              
    uint32 AvgValid                       :1; 
                                              
    uint32 WindowSlew                     :4; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuLsMstatus;


typedef union {
  struct {
    uint32 Reserved                       :18;
    uint32 Bits                           :14;
  } Bits;
  uint32 Reg32;
}  BmuLsOtpH;


typedef union {
  struct {
    uint32 Reserved                       :7; 
    uint32 MaxDutyCycle                   :9; 
    uint32 Reserved2                      :7; 
    uint32 MinDutyCycle                   :9; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuLsPwmMaxMin;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 DischargeCtrl                  :1; 
                                              
    uint32 Reserved2                      :2; 
    uint32 OutOfRange                     :1; 
    uint32 VbattGtVin                     :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuLsPwmStatus;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 SerTstInject                   :1; 
                                              
    uint32 Reserved2                      :1; 
    uint32 Selector                       :3; 
                                              
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuLsSertsta;


typedef union {
  struct {
    uint32 Reserved                       :29;
    uint32 Selector                       :3; 
                                              
                                              
                                              
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  BmuLsSertstb;


typedef union {
  struct {
    uint32 Reserved                       :28;
    uint32 PicoState                      :2; 
                                              
                                              
                                              
                                              
    uint32 PwmReset                       :1; 
    uint32 PicoReset                      :1; 
  } Bits;
  uint32 Reg32;
}  BmuLsSoftReset;


typedef union {
  struct {
    uint32 Reserved                       :29;
    uint32 IBattHighMask                  :1; 
    uint32 VBattLowMask                   :1; 
    uint32 TimerMask                      :1; 
  } Bits;
  uint32 Reg32;
}  BmuLsWakeMask;


typedef union {
  struct {
    uint32 Reserved                       :13;
    uint32 IBattHighSleep                 :1; 
                                              
                                              
                                              
                                              
    uint32 VBattLowSleep                  :1; 
                                              
                                              
                                              
                                              
    uint32 TimerSleep                     :1; 
                                              
                                              
                                              
    uint32 Reserved2                      :13;
    uint32 IBattHigh                      :1; 
                                              
    uint32 VBattLow                       :1; 
                                              
    uint32 Timer                          :1; 
                                              
  } Bits;
  uint32 Reg32;
}  BmuLsWakeStatus;

typedef struct {
  BmuLsSoftReset                      SoftReset;               
  BmuLsWakeStatus                     WakeStatus;              
  BmuLsWakeMask                       WakeMask;                
  BmuLsPwmStatus                      PwmStatus;               
  BmuLsBootromStatus                  PicoBootStatus;          
  uint8                               Pad0[0x8];
  BmuLsPwmMaxMin                      PwmMaxMin;               
  uint8                               Pad1[0x4];
  BmuLsBatteryChargeCtrl1             BatteryChargeCtrl1;      
  uint8                               Pad2[0x8];
  BmuLsMcontrol                       VBatAvgControl;          
  BmuLsMcontrol                       IBatAvgControl;          
  BmuLsMcontrol                       CalAvgControl;           
  BmuLsMcontrol                       ThermAvgControl;         
  BmuLsMcontrol                       RidaAvgControl;          
  BmuLsMcontrol                       RidbAvgControl;          
  BmuLsMcontrol                       VInputAvgControl;        
  BmuLsMcontrol                       IbatCoarseAvgControl;    
  uint32                              VBatInst;                
  uint32                              IBatInst;                
  uint32                              CalInst;                 
  uint32                              ThermInst;               
  uint32                              RidaInst;                
  uint32                              RidbInst;                
  uint32                              VInputInst;              
  uint32                              IbatCoarseInst;          
  uint32                              VBatAvg;                 
  uint32                              IBatAvg;                 
  uint32                              CalAvg;                  
  uint32                              ThermAvg;                
  uint32                              RidaAvg;                 
  uint32                              RidbAvg;                 
  uint32                              VInputAvg;               
  uint32                              IbatCoarseAvg;           
  BmuLsMstatus                        VBatStatus;              
  BmuLsMstatus                        IBatStatus;              
  BmuLsMstatus                        CalStatus;               
  BmuLsMstatus                        ThermStatus;             
  BmuLsMstatus                        RidaStatus;              
  BmuLsMstatus                        RidbStatus;              
  BmuLsMstatus                        VInputStatus;            
  BmuLsMstatus                        IbatCoarseStatus;        
  uint32                              ChargeMeterA;            
  uint32                              ChargeMeterB;            
  uint8                               Pad3[0x8];
  BmuLsFuelMeterValidReg              FmValid;                 
  uint32                              IiEnergyMeterA;          
  uint32                              IiEnergyMeterB;          
  uint32                              ViEnergyMeterA;          
  uint32                              ViEnergyMeterB;          
  BmuLsImpedanceTestResult            BatImpICos;              
  BmuLsImpedanceTestResult            BatImpISin;              
  BmuLsImpedanceTestResult            BatImpVCos;              
  BmuLsImpedanceTestResult            BatImpVSin;              
  BmuLsSertsta                        SerTstIntrfSelA;         
  BmuLsSertstb                        SerTstIntrfSelB;         
  uint32                              OtpLow;                  
  BmuLsOtpH                           OtpHigh;                 
  BmuLsIntergratorStartValue          IntegStartValue;         
}  BmuLsRegs;

#endif 



