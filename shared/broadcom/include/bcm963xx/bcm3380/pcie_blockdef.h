// ****************************************************************************
//
// Copyright (c) 2008 Broadcom Corporation
//
// This program is the proprietary software of Broadcom Corporation and/or
// its licensors, and may only be used, duplicated, modified or distributed
// pursuant to the terms and conditions of a separate, written license
// agreement executed between you and Broadcom (an "Authorized License").
// Except as set forth in an Authorized License, Broadcom grants no license
// (express or implied), right to use, or waiver of any kind with respect to
// the Software, and Broadcom expressly reserves all rights in and to the
// Software and all intellectual property rights therein.  IF YOU HAVE NO
// AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
// AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
// SOFTWARE.  
//
// Except as expressly set forth in the Authorized License,
//
// 1.     This program, including its structure, sequence and organization,
// constitutes the valuable trade secrets of Broadcom, and you shall use all
// reasonable efforts to protect the confidentiality thereof, and to use this
// information only in connection with your use of Broadcom integrated circuit
// products.
//
// 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
// "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
// OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
// RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
// IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
// A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
// ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
// THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
//
// 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
// OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
// INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
// RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
// HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
// EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
// WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
// FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
//
// ****************************************************************************
//
//  Filename:         pcie_blockdef.h
//  Generated by:     RDB Utility
//  Creation Date:    8/7/2008
//  Command Line:     
// ****************************************************************************
//
// IMPORTANT: DO NOT MODIFY, THIS IS AN AUTOGENERATED FILE. 
// Please modify the source .rdb file instead if you need to change this file. 
// Contact Jeff Bauch if you need more information.
//
// ****************************************************************************
#ifndef PCIE_BLOCKDEF_H__
#define PCIE_BLOCKDEF_H__



typedef union {
  struct {
    uint32 Bar1RemapAdd                   :16;
                                              
                                              
                                              
    uint32 Reserved                       :14;
    uint32 Bar1RemapEn                    :1; 
                                              
                                              
    uint32 Bar1SwapEn                     :1; 
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  PcieBar1RemapReg;


typedef union {
  struct {
    uint32 Bar2RemapAdd                   :16;
                                              
                                              
                                              
    uint32 Reserved                       :14;
    uint32 Bar2RemapEn                    :1; 
                                              
                                              
    uint32 Bar2SwapEn                     :1; 
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  PcieBar2RemapReg;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 IntL1Mask                      :8; 
                                              
  } Bits;
  uint32 Reg32;
}  PcieEpL1InterruptMask;


typedef union {
  struct {
    uint32 Reserved                       :24;
    uint32 IntL1Status                    :8; 
                                              
                                              
  } Bits;
  uint32 Reg32;
}  PcieEpL1InterruptStatus;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 PcieCoreLinkRstMask            :1; 
                                              
  } Bits;
  uint32 Reg32;
}  PcieEpPcieCoreLinkRstMask;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 PcieCoreLinkRstStatus          :1; 
                                              
  } Bits;
  uint32 Reg32;
}  PcieEpPcieCoreLinkRstStatus;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 PcieBridgeErrMask              :10;
                                              
                                              
  } Bits;
  uint32 Reg32;
}  PciePcieBridgeErrMask;


typedef union {
  struct {
    uint32 Reserved                       :22;
    uint32 Ubus2PcieSplitCompletionToError :1; 
                                              
    uint32 Pcie2UbusReqoutToError         :1; 
                                              
    uint32 Pcie2UbusReplyInToError        :1; 
                                              
    uint32 Pcie2UbusSplitCompletionToError :1; 
                                              
    uint32 UbusReplyInToError             :1; 
                                              
    uint32 UbusRequestInToError           :1; 
                                              
    uint32 UbusUnsupportedRequestError    :1; 
                                              
    uint32 UbusPcieType1ConfigAccessError :1; 
                                              
    uint32 UbusPcieConfigAccessError      :1; 
                                              
    uint32 UbusReplyInError               :1; 
  } Bits;
  uint32 Reg32;
}  PciePcieBridgeErrStatus;


typedef union {
  struct {
    uint32 Reserved                       :16;
    uint32 TbdOpt                         :9; 
    uint32 SoftLinkRstMode                :1; 
                                              
                                              
    uint32 DisU2PRtnRo                    :1; 
                                              
                                              
    uint32 Ubus2PcieMemWrAckOrd           :1; 
                                              
                                              
    uint32 Pcie2UbusOrd                   :1; 
                                              
                                              
    uint32 Ubus2PcieMemWrOrd              :1; 
                                              
                                              
    uint32 En4kChk                        :1; 
                                              
                                              
                                              
    uint32 RplyInSpaceChk                 :1; 
                                              
  } Bits;
  uint32 Reg32;
}  PciePcieBridgeOptReg1;


typedef union {
  struct {
    uint32 CfgType1FuncNo                 :3; 
    uint32 CfgType1DevNo                  :5; 
    uint32 CfgType1BusNo                  :8; 
    uint32 Reserved                       :8; 
    uint32 CfgType1BdSel                  :1; 
                                              
                                              
    uint32 DisPcieTimeout                 :1; 
                                              
    uint32 DisPcieAbort                   :1; 
                                              
    uint32 EnableTxCrdChk                 :1; 
                                              
                                              
    uint32 Reserved2                      :1; 
    uint32 DisUbusUrDecode                :1; 
                                              
                                              
                                              
                                              
                                              
                                              
    uint32 Reserved3                      :2; 
  } Bits;
  uint32 Reg32;
}  PciePcieBridgeOptReg2;


typedef union {
  struct {
    uint32 Reserved                       :29;
    uint32 PcieBridgeErrMask1             :3; 
                                              
                                              
  } Bits;
  uint32 Reg32;
}  PciePcieCoreErrMask1;


typedef union {
  struct {
    uint32 Reserved                       :20;
    uint32 PcieBridgeErrMask2             :12;
                                              
                                              
  } Bits;
  uint32 Reg32;
}  PciePcieCoreErrMask2;


typedef union {
  struct {
    uint32 Reserved                       :29;
    uint32 PcieCoreRxOverflowOrUnderflow  :1; 
                                              
    uint32 PoisonedPacket                 :1; 
    uint32 ErrorDlp                       :1; 
  } Bits;
  uint32 Reg32;
}  PciePcieCoreErrStatus1;


typedef union {
  struct {
    uint32 Reserved                       :20;
    uint32 TxOverflowError                :1; 
                                              
    uint32 RtagError                      :1; 
                                              
    uint32 DuplicateNpTag                 :1; 
                                              
    uint32 TxUhError                      :1; 
                                              
    uint32 TxUrError                      :1; 
                                              
    uint32 IllegalTxSizeError             :1; 
                                              
    uint32 EcrcError                      :1; 
    uint32 DetectedUnsupportedRequest     :1; 
                                              
    uint32 UnexpectedCompletion           :1; 
                                              
    uint32 CompletionTimeout              :1; 
                                              
    uint32 ReceivedPoisonedTlp            :1; 
                                              
    uint32 CompleterAbort                 :1; 
                                              
  } Bits;
  uint32 Reg32;
}  PciePcieCoreErrStatus2;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 NmiMask                        :1; 
                                              
    uint32 IntDMask                       :1; 
    uint32 IntCMask                       :1; 
    uint32 IntBMask                       :1; 
    uint32 IntAMask                       :1; 
  } Bits;
  uint32 Reg32;
}  PcieRcInterruptMask;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 NmiStatus                      :1; 
    uint32 IntDStatus                     :1; 
    uint32 IntCStatus                     :1; 
    uint32 IntBStatus                     :1; 
    uint32 IntAStatus                     :1; 
  } Bits;
  uint32 Reg32;
}  PcieRcInterruptStatus;


typedef union {
  struct {
    uint32 Reserved                       :16;
    uint32 ToTickParam                    :16;
  } Bits;
  uint32 Reg32;
}  PcieToTickParam;


typedef union {
  struct {
    uint32 Bar0Base                       :12;
                                              
                                              
    uint32 Reserved                       :4; 
    uint32 Bar0Mask                       :12;
                                              
                                              
    uint32 Reserved2                      :2; 
    uint32 Bar0SwapEn                     :1; 
                                              
                                              
                                              
    uint32 Bar0RemapEn                    :1; 
  } Bits;
  uint32 Reg32;
}  PcieUbus2PcieBar0BaseMaskReg;


typedef union {
  struct {
    uint32 Bar0RemapAdd                   :12;
                                              
                                              
                                              
                                              
                                              
    uint32 Reserved                       :20;
  } Bits;
  uint32 Reg32;
}  PcieUbus2PcieBar0RemapAddReg;


typedef union {
  struct {
    uint32 Bar1Base                       :12;
                                              
                                              
    uint32 Reserved                       :4; 
    uint32 Bar1Mask                       :12;
                                              
                                              
    uint32 Reserved2                      :2; 
    uint32 Bar1SwapEn                     :1; 
                                              
                                              
                                              
    uint32 Bar1RemapEn                    :1; 
  } Bits;
  uint32 Reg32;
}  PcieUbus2PcieBar1BaseMaskReg;


typedef union {
  struct {
    uint32 Bar1RemapAdd                   :12;
                                              
                                              
                                              
                                              
                                              
    uint32 Reserved                       :20;
  } Bits;
  uint32 Reg32;
}  PcieUbus2PcieBar1RemapAddReg;

typedef struct {
  uint8                               Pad0[0x2818];
  PcieBar1RemapReg                    Bar1RemapReg;            
  PcieBar2RemapReg                    Bar2RemapReg;            
  PciePcieBridgeOptReg1               PcieBridgeOptReg1;       
  PciePcieBridgeOptReg2               PcieBridgeOptReg2;       
  PcieUbus2PcieBar0BaseMaskReg        Ubus2PcieBar0BaseMaskReg;
  PcieUbus2PcieBar0RemapAddReg        Ubus2PcieBar0RemapAddReg;
  PcieUbus2PcieBar1BaseMaskReg        Ubus2PcieBar1BaseMaskReg;
  PcieUbus2PcieBar1RemapAddReg        Ubus2PcieBar1RemapAddReg;
  PciePcieBridgeErrStatus             PcieBridgeErrStatus;     
  PciePcieBridgeErrMask               PcieBridgeErrMask;       
  PciePcieCoreErrStatus2              PcieCoreErrStatus2;      
  PciePcieCoreErrMask2                PcieCoreErrMask2;        
  PciePcieCoreErrStatus1              PcieCoreErrStatus1;      
  PciePcieCoreErrMask1                PcieCoreErrMask1;        
  PcieRcInterruptStatus               RcInterruptStatus;       
  PcieRcInterruptMask                 RcInterruptMask;         
                                                                 
  uint32                              UbusToParam;             
                                                                 
  uint32                              PcieToParam;             
                                                                 
  PcieToTickParam                     ToTickParam;             
                                                                 
  PcieEpL1InterruptMask               EpL1InterruptMask;       
  PcieEpL1InterruptStatus             EpL1InterruptStatus;     
                                                                 
  uint8                               Pad1[0x10];
  uint32                              EpL2IntMask;             
  uint32                              EpL2IntSetStatus;        
                                                                 
  uint32                              EpL2IntStatus;           
                                                                 
  PcieEpPcieCoreLinkRstStatus         EpPcieCoreLinkRstStatus; 
  PcieEpPcieCoreLinkRstMask           EpPcieCoreLinkRstMask;   
                                                                 
}  PcieRegs;

#endif 



