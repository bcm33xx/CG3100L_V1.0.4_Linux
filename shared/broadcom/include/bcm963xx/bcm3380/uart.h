// ****************************************************************************
//
// Copyright (c) 2008 Broadcom Corporation
//
// This program is the proprietary software of Broadcom Corporation and/or
// its licensors, and may only be used, duplicated, modified or distributed
// pursuant to the terms and conditions of a separate, written license
// agreement executed between you and Broadcom (an "Authorized License").
// Except as set forth in an Authorized License, Broadcom grants no license
// (express or implied), right to use, or waiver of any kind with respect to
// the Software, and Broadcom expressly reserves all rights in and to the
// Software and all intellectual property rights therein.  IF YOU HAVE NO
// AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
// AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
// SOFTWARE.  
//
// Except as expressly set forth in the Authorized License,
//
// 1.     This program, including its structure, sequence and organization,
// constitutes the valuable trade secrets of Broadcom, and you shall use all
// reasonable efforts to protect the confidentiality thereof, and to use this
// information only in connection with your use of Broadcom integrated circuit
// products.
//
// 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
// "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
// OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
// RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
// IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
// A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
// ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
// THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
//
// 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
// OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
// INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
// RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
// HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
// EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
// WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
// FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
//
// ****************************************************************************
//
//  Filename:         uart.h
//  Generated by:     RDB Utility
//  Creation Date:    8/7/2008
//  Command Line:     
// ****************************************************************************
//
// IMPORTANT: DO NOT MODIFY, THIS IS AN AUTOGENERATED FILE. 
// Please modify the source .rdb file instead if you need to change this file. 
// Contact Jeff Bauch if you need more information.
//
// ****************************************************************************
#ifndef UART_H__
#define UART_H__



typedef union {
  struct {
    uint32 Reserved                       :12;
    uint32 DsrNoSense                     :1; 
    uint32 DcdNoSense                     :1; 
    uint32 CtsNoSense                     :1; 
    uint32 RiNoSense                      :1; 
    uint32 DsrEdg                         :1; 
    uint32 DcdEdg                         :1; 
    uint32 CtsEdg                         :1; 
    uint32 RiEdg                          :1; 
    uint32 DsrMsk                         :1; 
                                              
    uint32 DcdMsk                         :1; 
                                              
    uint32 CtsMsk                         :1; 
                                              
    uint32 RiMsk                          :1; 
                                              
                                              
    uint32 DeltaDsr                       :1; 
                                              
                                              
    uint32 DeltaDcd                       :1; 
                                              
                                              
    uint32 DeltaCts                       :1; 
                                              
                                              
    uint32 DeltaRi                        :1; 
                                              
                                              
    uint32 Dsr                            :1; 
    uint32 Dcd                            :1; 
    uint32 Cts                            :1; 
    uint32 Ri                             :1; 
  } Bits;
  uint32 Reg32;
}  UartExtInput;


typedef union {
  struct {
    uint32 Reserved                       :21;
    uint32 BrkDet                         :1; 
    uint32 ParErr                         :1; 
    uint32 FrmErr                         :1; 
                                              
    uint32 Data                           :8; 
  } Bits;
  uint32 Reg32;
}  UartUartFifo;


typedef union {
  struct {
    uint32 Reserved                       :8; 
    uint32 Brgen                          :1; 
    uint32 Txen                           :1; 
    uint32 Rxen                           :1; 
    uint32 Loopbk                         :1; 
                                              
    uint32 Txparityen                     :1; 
    uint32 Txparityeven                   :1; 
    uint32 Rxparityen                     :1; 
    uint32 Rxparityeven                   :1; 
    uint32 Reserved2                      :1; 
    uint32 Xmitbreak                      :1; 
                                              
    uint32 Bitssym                        :2; 
                                              
    uint32 Stopbits                       :4; 
                                              
    uint32 Rsttxfifos                     :1; 
    uint32 Rstrxfifos                     :1; 
    uint32 Rsttxdn                        :1; 
    uint32 Rxtimeoutcnt                   :5; 
                                              
  } Bits;
  uint32 Reg32;
}  UartControl;


typedef union {
  struct {
    uint32 Txchardonemsk                  :1; 
    uint32 Rxbrkmsk                       :1; 
    uint32 Rxparerrmsk                    :1; 
    uint32 Rxframerrmsk                   :1; 
    uint32 Rxfifonemsk                    :1; 
    uint32 Rxfifotholdmsk                 :1; 
    uint32 Rxfifofullmsk                  :1; 
    uint32 Rxtimeoutmsk                   :1; 
    uint32 Rxovferrmsk                    :1; 
    uint32 Rxunderrmsk                    :1; 
    uint32 Txfifoemtmsk                   :1; 
    uint32 Txreadlatchmsk                 :1; 
    uint32 Txfifotholdmsk                 :1; 
    uint32 Txovferrmsk                    :1; 
    uint32 Txunderrmsk                    :1; 
    uint32 Deltaipmsk                     :1; 
    uint32 Txchardone                     :1; 
    uint32 Rxbrk                          :1; 
                                              
    uint32 Rxparerr                       :1; 
                                              
    uint32 Rxframerr                      :1; 
                                              
    uint32 Rxfifone                       :1; 
    uint32 Rxfifothold                    :1; 
                                              
    uint32 Rxfifofull                     :1; 
    uint32 Rxtimeout                      :1; 
                                              
    uint32 Rxovferr                       :1; 
    uint32 Rxunderr                       :1; 
    uint32 Txfifoemt                      :1; 
    uint32 Txreadlatch                    :1; 
                                              
    uint32 Txfifothold                    :1; 
                                              
    uint32 Txovferr                       :1; 
    uint32 Txunderr                       :1; 
    uint32 Deltaip                        :1; 
                                              
  } Bits;
  uint32 Reg32;
}  UartIntStatusMask;


typedef union {
  struct {
    uint32 Reserved                       :3; 
    uint32 TxFifoFillLevel                :5; 
    uint32 Reserved2                      :3; 
    uint32 RxFifoFillLevel                :5; 
    uint32 TxFifoThreshold                :4; 
    uint32 RxFifoThreshold                :4; 
                                              
    uint32 Reserved3                      :6; 
    uint32 UartRtsOut                     :1; 
                                              
    uint32 UartDtrOut                     :1; 
                                              
  } Bits;
  uint32 Reg32;
}  UartMiscCtl;

typedef struct {
  UartControl                         Control;                 
  uint32                              Baudword;                
  UartMiscCtl                         MiscCtl;                 
  UartExtInput                        ExtInput;                
  UartIntStatusMask                   Intstatusmask;           
  UartUartFifo                        Uartfifo;                
}  UartRegs;

#endif 



