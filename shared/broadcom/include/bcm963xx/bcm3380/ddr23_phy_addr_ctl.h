// ****************************************************************************
//
// Copyright (c) 2008 Broadcom Corporation
//
// This program is the proprietary software of Broadcom Corporation and/or
// its licensors, and may only be used, duplicated, modified or distributed
// pursuant to the terms and conditions of a separate, written license
// agreement executed between you and Broadcom (an "Authorized License").
// Except as set forth in an Authorized License, Broadcom grants no license
// (express or implied), right to use, or waiver of any kind with respect to
// the Software, and Broadcom expressly reserves all rights in and to the
// Software and all intellectual property rights therein.  IF YOU HAVE NO
// AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
// AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
// SOFTWARE.  
//
// Except as expressly set forth in the Authorized License,
//
// 1.     This program, including its structure, sequence and organization,
// constitutes the valuable trade secrets of Broadcom, and you shall use all
// reasonable efforts to protect the confidentiality thereof, and to use this
// information only in connection with your use of Broadcom integrated circuit
// products.
//
// 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
// "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
// OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
// RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
// IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
// A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
// ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
// THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
//
// 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
// OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
// INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
// RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
// HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
// EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
// WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
// FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
//
// ****************************************************************************
//
//  Filename:         ddr23_phy_addr_ctl.h
//  Generated by:     RDB Utility
//  Creation Date:    8/7/2008
//  Command Line:     
// ****************************************************************************
//
// IMPORTANT: DO NOT MODIFY, THIS IS AN AUTOGENERATED FILE. 
// Please modify the source .rdb file instead if you need to change this file. 
// Contact Jeff Bauch if you need more information.
//
// ****************************************************************************
#ifndef DDR23_PHY_ADDR_CTL_H__
#define DDR23_PHY_ADDR_CTL_H__



typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 DisDdrClk                      :1; 
                                              
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlClkPmCtrl;


typedef union {
  struct {
    uint32 Reserved                       :27;
    uint32 Rt60B                          :1; 
                                              
                                              
    uint32 SelSstl18                      :1; 
                                              
                                              
    uint32 SeltxdrvCi                     :1; 
                                              
                                              
    uint32 Selrxdrv                       :1; 
                                              
                                              
    uint32 Slew                           :1; 
                                              
                                              
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlDrivePadCtl;


typedef union {
  struct {
    uint32 Reserved                       :15;
    uint32 OvrEn                          :1; 
                                              
                                              
                                              
                                              
    uint32 Reserved2                      :2; 
    uint32 OvrFineFall                    :2; 
    uint32 Reserved3                      :2; 
    uint32 OvrFineRise                    :2; 
                                              
    uint32 Reserved4                      :3; 
    uint32 OvrStep                        :5; 
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlDynamicVdlOverride;


typedef union {
  struct {
    uint32 Idle                           :1; 
                                              
                                              
                                              
                                              
    uint32 Reserved                       :22;
    uint32 Rxenb                          :1; 
                                              
                                              
                                              
    uint32 Reserved2                      :1; 
    uint32 CtlIddq                        :1; 
                                              
                                              
                                              
                                              
    uint32 CtlReb                         :1; 
                                              
                                              
                                              
                                              
    uint32 CtlOeb                         :1; 
                                              
                                              
                                              
                                              
    uint32 Reserved3                      :1; 
    uint32 CkeIddq                        :1; 
                                              
                                              
                                              
    uint32 CkeReb                         :1; 
                                              
                                              
                                              
    uint32 CkeOeb                         :1; 
                                              
                                              
                                              
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlIdlePadControl;


typedef union {
  struct {
    uint32 Div2ClkReset                   :1; 
                                              
                                              
    uint32 Reserved                       :9; 
    uint32 TestSel                        :5; 
    uint32 TestEn                         :1; 
    uint32 BgapAdj                        :4; 
    uint32 Reserved2                      :4; 
    uint32 VcoRng                         :1; 
                                              
                                              
    uint32 PwrdnCh1                       :1; 
    uint32 Bypen                          :1; 
    uint32 EnbClkout                      :1; 
    uint32 Dreset                         :1; 
    uint32 Areset                         :1; 
    uint32 Reserved3                      :1; 
    uint32 Pwrdn                          :1; 
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlPllConfig;


typedef union {
  struct {
    uint32 TestaSel                       :2; 
    uint32 KvcoXs                         :3; 
    uint32 KvcoXf                         :3; 
    uint32 LpfBw                          :2; 
    uint32 LfOrder                        :1; 
    uint32 Cn                             :2; 
    uint32 Rn                             :2; 
    uint32 Cp                             :2; 
    uint32 Cz                             :2; 
    uint32 Rz                             :3; 
    uint32 Icpx                           :5; 
    uint32 IcpOff                         :5; 
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlPllControl1;


typedef union {
  struct {
    uint32 Reserved                       :26;
    uint32 PtapAdj                        :2; 
    uint32 CtapAdj                        :2; 
    uint32 LowcurEn                       :1; 
    uint32 BiasinEn                       :1; 
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlPllControl2;


typedef union {
  struct {
    uint32 M1div                          :8; 
    uint32 NdivFrac                       :24;
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlPllDivider;


typedef union {
  struct {
    uint32 Reserved                       :5; 
    uint32 NdivDitherMfb                  :1; 
    uint32 NdivPwrdn                      :1; 
    uint32 Reserved2                      :2; 
    uint32 NdivMode                       :3; 
    uint32 Reserved3                      :3; 
    uint32 NdivInt                        :9; 
    uint32 P2div                          :4; 
    uint32 P1div                          :4; 
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlPllPreDivider;


typedef union {
  struct {
    uint32 RefCycPerTick                  :16;
    uint32 NdivAmp                        :16;
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlPllSsCfg;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 SsEn                           :1; 
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlPllSsEn;


typedef union {
  struct {
    uint32 Reserved                       :31;
    uint32 Lock                           :1; 
                                              
                                              
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlPllStatus;


typedef union {
  struct {
    uint32 Reserved                       :16;
    uint32 Major                          :8; 
    uint32 Minor                          :8; 
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlRevision;


typedef union {
  struct {
    uint32 Reserved                       :11;
    uint32 OvrForce                       :1; 
                                              
                                              
                                              
    uint32 Reserved2                      :3; 
    uint32 OvrEn                          :1; 
                                              
                                              
                                              
                                              
                                              
    uint32 Reserved3                      :2; 
    uint32 OvrFineFall                    :2; 
    uint32 Reserved4                      :2; 
    uint32 OvrFineRise                    :2; 
    uint32 Reserved5                      :3; 
    uint32 OvrStep                        :5; 
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlStaticVdlOverride;


typedef union {
  struct {
    uint32 Reserved                       :1; 
    uint32 PdDone                         :1; 
                                              
    uint32 NdDone                         :1; 
                                              
    uint32 SampleDone                     :1; 
    uint32 AutoSampleEn                   :1; 
                                              
                                              
                                              
                                              
    uint32 SampleEn                       :1; 
                                              
                                              
                                              
                                              
                                              
    uint32 AddrOvrEn                      :1; 
                                              
                                              
                                              
    uint32 DqOvrEn                        :1; 
                                              
                                              
                                              
    uint32 PdComp                         :4; 
                                              
    uint32 NdComp                         :4; 
                                              
    uint32 AddrPdOverrideVal              :4; 
                                              
    uint32 AddrNdOverrideVal              :4; 
                                              
    uint32 DqPdOverrideVal                :4; 
                                              
    uint32 DqNdOverrideVal                :4; 
                                              
  } Bits;
  uint32 Reg32;
}  Ddr23PhyAddrCtlZqPvtCompCtl;

typedef struct {
  Ddr23PhyAddrCtlRevision             Revision;                
  Ddr23PhyAddrCtlClkPmCtrl            ClkPmCtrl;               
  uint8                               Pad0[0x8];
  Ddr23PhyAddrCtlPllStatus            PllStatus;               
  Ddr23PhyAddrCtlPllConfig            PllConfig;               
  Ddr23PhyAddrCtlPllPreDivider        PllPreDivider;           
  Ddr23PhyAddrCtlPllDivider           PllDivider;              
  Ddr23PhyAddrCtlPllControl1          PllControl1;             
  Ddr23PhyAddrCtlPllControl2          PllControl2;             
  Ddr23PhyAddrCtlPllSsEn              PllSsEn;                 
  Ddr23PhyAddrCtlPllSsCfg             PllSsCfg;                
  Ddr23PhyAddrCtlStaticVdlOverride    StaticVdlOverride;       
                                                                 
  Ddr23PhyAddrCtlDynamicVdlOverride   DynamicVdlOverride;      
                                                                 
  Ddr23PhyAddrCtlIdlePadControl       IdlePadControl;          
  Ddr23PhyAddrCtlZqPvtCompCtl         ZqPvtCompCtl;            
  Ddr23PhyAddrCtlDrivePadCtl          DrivePadCtl;             
}  Ddr23PhyAddrCtlRegisters;

#endif 



